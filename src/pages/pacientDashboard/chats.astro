<!DOCTYPE html>
<html lang="pt-BR">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>MedFinder â€“ Conversas</title>
    <script type="module">
      import { createIcons, icons } from 'lucide';
      document.addEventListener('DOMContentLoaded', () => createIcons({ icons }));
    </script>
    <style>
      :root {
        --primary: #0B9A7A;
        --primary-dark: #0A8A6E;
        --accent: #E91E63;
        --text-dark: #1F2937;
        --text-light: #F3F4F6;
        --background: #F9FAFB;
        --spacing-xs: 0.5rem;
        --spacing-sm: 1rem;
        --spacing-md: 1.5rem;
        --spacing-lg: 2rem;
        --radius: 8px;
      }
      * { margin: 0; padding: 0; box-sizing: border-box; }
      body {
        font-family: 'Inter', sans-serif;
        background: var(--background);
        color: var(--text-dark);
        display: flex; min-height: 100vh;
      }
      /* Sidebar: adapted from MedicDashboardLayout */
      .sidebar {
        width: 280px;
        background: linear-gradient(180deg, var(--text-dark) 0%, var(--primary-dark) 100%);
        padding: 2rem 0;
        display: flex;
        flex-direction: column;
        position: fixed;
        top: 0; left: 0; bottom: 0;
        overflow-y: auto;
        z-index: 1000;
      }
      .logo {
        padding: 0 2rem;
        margin-bottom: 3rem;
      }
      .logo h1 {
        color: white;
        font-size: 1.8rem;
        font-weight: 700;
        display: flex;
        align-items: center;
        gap: 0.5rem;
      }
      .logo .icon {
        width: 32px; height: 32px;
        background: linear-gradient(45deg, var(--primary), var(--accent));
        border-radius: 8px;
        display: flex; align-items: center; justify-content: center;
      }
      .nav-menu {
        flex: 1;
        padding: 0 1rem;
      }
      .nav-item {
        display: flex; align-items: center; gap: 1rem;
        padding: 1rem 1.5rem; margin: 0.5rem 0;
        color: var(--text-light);
        cursor: pointer; border-radius: 12px;
        transition: all 0.3s ease; text-decoration: none;
      }
      .nav-item:hover {
        background: rgba(255, 255, 255, 0.1);
        color: white;
        transform: translateX(5px);
      }
      .nav-item.active {
        background: linear-gradient(135deg, var(--primary), var(--primary-dark));
        color: white;
        box-shadow: 0 4px 15px rgba(11, 154, 122, 0.3);
        cursor: default;
      }
      .logout-section {
        padding: 0 1rem; border-top: 1px solid rgba(255,255,255,0.1);
        padding-top: 1rem;
      }
      .logout-section .nav-item { gap: 0.5rem; }
      /* Main Content */
       /* Main Content */
       .main-content { flex: 1; margin-left: 280px; display: flex; flex-direction: column; background: var(--background); }
      .chat-container { display: flex; flex: 1; gap: var(--spacing-md); padding: var(--spacing-md); overflow: hidden; }

      /* Chat List */
      .chat-sidebar { width: 300px; background: #fff; border-radius: var(--radius); box-shadow: 0 2px 8px rgba(0,0,0,0.05); display: flex; flex-direction: column; }
      .chat-header { padding: var(--spacing-md); border-bottom: 1px solid #E6E6E6; display: flex; justify-content: space-between; align-items: center; }
      .chat-header h3 { font-size: 1.25rem; font-weight: 700; }
      .new-chat-btn { background: var(--primary); color: #fff; border: none; border-radius: var(--radius); padding: var(--spacing-xs) var(--spacing-sm); cursor: pointer; font-size: 0.9rem; }
      .new-chat-btn:hover { background: var(--primary-dark); }
      .search-bar { padding: var(--spacing-sm) var(--spacing-md); border-bottom: 1px solid #E6E6E6; }
      .search-input { width: 100%; padding: var(--spacing-xs) var(--spacing-sm); border: 1px solid #E6E6E6; border-radius: var(--radius); font-size: 0.9rem; }
      .search-input:focus { border-color: var(--primary); outline: none; }
      .chat-list { flex: 1; overflow-y: auto; }
      .chat-item { padding: var(--spacing-sm) var(--spacing-md); border-bottom: 1px solid #E6E6E6; cursor: pointer; display: flex; flex-direction: column; gap: var(--spacing-xs); transition: background 0.2s; }
      .chat-item:hover { background: #F5F5F5; }
      .chat-item.active { background: var(--primary); color: #fff; }
      .chat-item-header { display: flex; justify-content: space-between; align-items: center; }
      .chat-item-name { font-weight: 600; font-size: 1rem; }
      .chat-item-time { font-size: 0.75rem; color: #6B7280; }
      .chat-item-preview { font-size: 0.85rem; color: #6B7280; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }

      /* Chat Main */
      .chat-main { flex: 1; background: #fff; border-radius: var(--radius); box-shadow: 0 2px 8px rgba(0,0,0,0.05); display: flex; flex-direction: column; }
      .chat-main-header { padding: var(--spacing-md); border-bottom: 1px solid #E6E6E6; display: flex; align-items: center; gap: var(--spacing-sm); }
      .chat-avatar { width: 40px; height: 40px; background: var(--primary); color: #fff; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-weight: 600; }
      .chat-messages { flex: 1; padding: var(--spacing-md); background: var(--background); overflow-y: auto; display: flex; flex-direction: column; gap: var(--spacing-sm); }
      .message { display: flex; max-width: 70%; gap: var(--spacing-xs); align-items: flex-end; }
      .message.sent { margin-left: auto; flex-direction: row-reverse; }
      .message-content { padding: var(--spacing-xs) var(--spacing-sm); background: #fff; box-shadow: 0 1px 2px rgba(0,0,0,0.1); line-height: 1.4; border-radius: 18px 18px 18px 4px; }
      .message.received .message-content { background: #F1F1F1; border-radius: 18px 18px 4px 18px; }
      .message.sent .message-content { background: var(--primary); color: #fff; }
      .message-time { font-size: 0.75rem; color: #6B7280; white-space: nowrap; }
      .chat-input-area { padding: var(--spacing-sm) var(--spacing-md); border-top: 1px solid #E6E6E6; display: flex; gap: var(--spacing-sm); align-items: flex-end; }
      .chat-input { flex: 1; padding: var(--spacing-xs) var(--spacing-sm); border: 1px solid #E6E6E6; border-radius: 25px; font-size: 0.95rem; resize: none; line-height: 1.5; min-height: 44px; max-height: 120px; }
      .chat-input:focus { border-color: var(--primary); outline: none; }
      .send-btn { padding: var(--spacing-xs) var(--spacing-sm); background: var(--primary); color: #fff; border: none; border-radius: 25px; cursor: pointer; display: flex; align-items: center; gap: var(--spacing-xs); font-size: 0.9rem; }
      .send-btn:hover { background: var(--primary-dark); }
      .send-btn:disabled { background: #9CA3AF; cursor: not-allowed; }
      .empty-state { flex: 1; display: flex; flex-direction: column; align-items: center; justify-content: center; color: #6B7280; text-align: center; gap: var(--spacing-sm); padding: var(--spacing-md); }
      .empty-state i { font-size: 2rem; color: var(--primary); }

      /* Modal Styles */
      .modal { position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0,0,0,0.5); display: none; align-items: center; justify-content: center; z-index: 2000; }
      .modal-content { background: #fff; padding: var(--spacing-md); border-radius: var(--radius); width: 90%; max-width: 400px; box-shadow: 0 4px 16px rgba(0,0,0,0.2); }
      .modal-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: var(--spacing-md); }
      .modal-header h3 { font-size: 1.25rem; }
      .close-btn { background: transparent; border: none; font-size: 1.5rem; cursor: pointer; }
      .form-group { margin-bottom: var(--spacing-md); }
      .form-group label { display: block; margin-bottom: var(--spacing-xs); font-weight: 600; }
      .form-group select { width: 100%; padding: var(--spacing-xs) var(--spacing-sm); border: 1px solid #E6E6E6; border-radius: var(--radius); }
      .modal-actions { display: flex; justify-content: flex-end; gap: var(--spacing-sm); }
      .btn-secondary { background: #E6E6E6; color: var(--text-dark); border: none; padding: var(--spacing-xs) var(--spacing-sm); border-radius: var(--radius); cursor: pointer; }
      .btn-secondary:hover { background: #D1D1D1; }
      .btn-primary { background: var(--primary); color: #fff; border: none; padding: var(--spacing-xs) var(--spacing-sm); border-radius: var(--radius); cursor: pointer; }
      .btn-primary:hover { background: var(--primary-dark); }
    </style>
  </head>
  <body>
    <!-- Sidebar -->
    <div class="sidebar">
      <div class="logo">
        <h1>
          <div class="icon"><i data-lucide="heart-pulse"></i></div>
          MedFinder
        </h1>
      </div>
      <nav class="nav-menu">
        <a href="/pacientDashboard" class="nav-item" class:list={[ 'nav-item', { active: Astro.url.pathname === '/pacientDashboard' } ]}>
          <i data-lucide="home"></i><span>Dashboard</span>
        </a>
        <a href="/pacientDashboard/chats" class:list={[ 'nav-item', { active: Astro.url.pathname === '/pacientDashboard/chats' } ]}>
          <i data-lucide="message-circle"></i><span>Chat</span>
        </a>
        <a href="/pacientDashboard/appointments" class:list={[ 'nav-item', { active: Astro.url.pathname === '/pacientDashboard/appointments' } ]}>
          <i data-lucide="calendar"></i><span>Agendamentos</span>
        </a>
        <a href="/pacientDashboard/profile" class:list={[ 'nav-item', { active: Astro.url.pathname === '/pacientDashboard/profile' } ]}>
          <i data-lucide="settings"></i><span>Perfil</span>
        </a>
      </nav>
      <div class="logout-section">
        <div class="nav-item" onclick="window.logout()">
          <i data-lucide="log-out"></i><span>Sair</span>
        </div>
      </div>
    </div>
    <!-- Main Content -->
    <div class="main-content">
      <div class="chat-container">
        <div class="chat-sidebar">
          <div class="chat-header">
            <h3>Conversas</h3>
            <button class="new-chat-btn" id="newChatBtn"><i data-lucide="plus"></i> Nova</button>
          </div>
          <div class="search-bar">
            <input type="text" id="searchInput" class="search-input" placeholder="Buscar..." />
          </div>
          <div class="chat-list" id="chatList"><div class="loading">Carregando...</div></div>
        </div>
        <div class="chat-main" id="chatMain">
          <div class="empty-state" id="emptyState">
            <i data-lucide="message-circle"></i>
            <h3>Selecione uma conversa</h3>
            <p>Escolha uma conversa existente ou inicie uma nova</p>
          </div>
        </div>
      </div>
    </div>

    <!-- New Chat Modal -->
    <div class="modal" id="newChatModal">
      <div class="modal-content">
        <div class="modal-header">
          <h3>Nova Conversa</h3>
          <button class="close-btn" id="closeModalBtn">&times;</button>
        </div>
        <div class="form-group">
          <label id="selectLabel" for="userSelect">Selecionar:</label>
          <select id="userSelect"><option value="">Carregando...</option></select>
        </div>
        <div class="modal-actions">
          <button class="btn-secondary" id="cancelBtn">Cancelar</button>
          <button class="btn-primary" id="createChatBtn">Criar Conversa</button>
        </div>
      </div>
    </div>

    <script>
      document.addEventListener("DOMContentLoaded", async () => {
        /* Authentication & API setup */
        const userId = localStorage.getItem("usuario_id");
        const userType = localStorage.getItem("tipo_usuario");
        if (!userId || !userType) return window.location.href = "/login";
        const API_BASE_URL = "https://medfinder-fastapi.azurewebsites.net";
        const WS_BASE_URL = "wss://medfinder-fastapi.azurewebsites.net";

        /* DOM Elements */
        const newChatBtn = document.getElementById("newChatBtn");
        const newChatModal = document.getElementById("newChatModal");
        const closeModalBtn = document.getElementById("closeModalBtn");
        const cancelBtn = document.getElementById("cancelBtn");
        const createChatBtn = document.getElementById("createChatBtn");
        const userSelect = document.getElementById("userSelect");
        const chatListEl = document.getElementById("chatList");
        const chatMainEl = document.getElementById("chatMain");
        const emptyStateEl = document.getElementById("emptyState");
        const searchInput = document.getElementById("searchInput");
        let convs = [], allUsers = [], activeConv = null, socket = null;

        /* Prevent modal on load */
        newChatModal.style.display = 'none';

        /* Load & render conversations */
        async function loadConvs(filter = '') {
          const res = await fetch(`${API_BASE_URL}/usuarios/${userId}/conversas`);
          convs = await res.json();
          renderList(filter);
        }
        function renderList(filter) {
          chatListEl.innerHTML = '';
          (convs.filter(c => ((userType==='paciente'?c.MedicoNome:c.PacienteNome)
            .toLowerCase().includes(filter.toLowerCase()))).length || [])
            .forEach(c => {
              const name = userType==='paciente'?c.MedicoNome:c.PacienteNome;
              const div = document.createElement('div'); div.className='chat-item';
              div.innerHTML = `<div class="chat-item-header"><span class="chat-item-name">${name}</span></div>`;
              div.onclick = ()=>selectConv(c);
              chatListEl.appendChild(div);
            });
          if (!convs.length) chatListEl.innerHTML = '<div class="loading">Nenhuma conversa</div>';
        }

        /* Show/hide modal */
        newChatBtn.onclick = async () => { newChatModal.style.display='flex';
          const res = await fetch(`${API_BASE_URL}/${userType==='paciente'?'medicos':'pacientes'}`);
          allUsers = await res.json(); userSelect.innerHTML = '<option value="">Selecione...</option>';
          allUsers.forEach(u=> userSelect.innerHTML += `<option value="${u.id}">${u.nome}</option>`);
          document.getElementById('selectLabel').textContent = userType==='paciente'?'Selecionar MÃ©dico:':'Selecionar Paciente:';
        };
        [closeModalBtn,cancelBtn].forEach(btn=>btn.onclick=()=>newChatModal.style.display='none');
        createChatBtn.onclick = async () => { /* create logic */ };
        window.onclick = e=>{ if(e.target===newChatModal) newChatModal.style.display='none'; };
        searchInput.oninput = e=>renderList(e.target.value);

        /* Conversation selection & chat rendering (omitted for brevity) */

        await loadConvs();
      });
    </script>
  </body>
</html>