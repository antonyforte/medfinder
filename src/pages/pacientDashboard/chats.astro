---
import Sidebar from '../../components/Sidebar.astro'

// Data will be fetched client-side
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>MedFinder – Chat</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/lucide/0.263.1/umd/lucide.js"></script>
    <style>
      :root {
        --primary: #0B9A7A;
        --primary-dark: #097F66;
        --secondary: #F5F9F8;
        --text-dark: #16403C;
        --text-light: #6A8784;
        --accent: #E6F5F2;
      }
      body {
        font-family: 'Inter', sans-serif;
        background-color: var(--secondary);
        color: var(--text-dark);
        display: flex;
        justify-content: center;
      }
      .container {
        display: flex;
        min-height: 100vh;
        width: 100%;
        max-width: 1400px;
        background: white;
        box-shadow: 0 0 50px rgba(0,0,0,0.1);
      }
      .main-content {
        flex: 1;
        display: flex;
        flex-direction: column;
      }
      .chat-container {
        display: flex;
        flex-grow: 1;
        overflow: hidden;
      }
      .chat-sidebar {
        width: 320px;
        border-right: 1px solid var(--accent);
        display: flex;
        flex-direction: column;
      }
      .chat-header {
        padding: 1.5rem;
        border-bottom: 1px solid var(--accent);
      }
      .chat-header h3 {
        font-size: 1.5rem;
        font-weight: 700;
      }
      .chat-list {
        overflow-y: auto;
        flex-grow: 1;
      }
      .chat-item {
        padding: 1rem 1.5rem;
        border-bottom: 1px solid var(--accent);
        cursor: pointer;
        transition: background 0.2s ease;
      }
      .chat-item:hover {
        background: var(--accent);
      }
      .chat-item.active {
        background: var(--primary);
        color: white;
      }
      .chat-item.active .chat-item-name,
      .chat-item.active .chat-item-time,
      .chat-item.active .chat-item-preview {
        color: white;
      }
      .chat-item-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.5rem;
      }
      .chat-item-name {
        font-weight: 600;
      }
      .chat-item-preview {
        color: var(--text-light);
        font-size: 0.9rem;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
      }
      .chat-main {
        flex: 1;
        display: flex;
        flex-direction: column;
      }
      .chat-main-header {
        padding: 1.5rem;
        border-bottom: 1px solid var(--accent);
        font-weight: 600;
        font-size: 1.2rem;
      }
      .chat-messages {
        flex: 1;
        padding: 1.5rem;
        overflow-y: auto;
        background: var(--secondary);
      }
      .message {
        margin-bottom: 1rem;
        display: flex;
        max-width: 80%;
      }
      .message.sent {
        margin-left: auto;
        flex-direction: row-reverse;
      }
      .message-content {
        padding: 0.75rem 1rem;
        border-radius: 15px;
        background: white;
        box-shadow: 0 1px 3px rgba(0,0,0,0.05);
      }
      .message.sent .message-content {
        background: var(--primary);
        color: white;
      }
      .chat-input-area {
        padding: 1rem;
        background: white;
        border-top: 1px solid var(--accent);
        display: flex;
        gap: 1rem;
      }
      .chat-input {
        flex: 1;
        padding: 0.75rem 1rem;
        border: 1px solid var(--accent);
        border-radius: 25px;
        outline: none;
      }
      .send-btn {
        padding: 0.75rem 1.5rem;
        background: var(--primary);
        color: white;
        border: none;
        border-radius: 25px;
        cursor: pointer;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <Sidebar currentPage="chats" userInitials="JD" />
      <div class="main-content">
        <div class="chat-container">
          <div class="chat-sidebar">
            <div class="chat-header">
              <h3>Chats</h3>
            </div>
            <div class="chat-list" id="chatList">
              <p style="padding: 1rem;">Carregando conversas...</p>
            </div>
          </div>
          <div class="chat-main" id="chatMain" style="display: none;">
            <div class="chat-main-header" id="chatMainHeader"></div>
            <div class="chat-messages" id="chatMessages"></div>
            <div class="chat-input-area">
              <input type="text" class="chat-input" id="messageInput" placeholder="Digite sua mensagem..." />
              <button class="send-btn" id="sendBtn">Enviar</button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <script>
      declare const lucide: any;

      document.addEventListener("DOMContentLoaded", async () => {
        const userId = localStorage.getItem("usuario_id");
        const userType = localStorage.getItem("tipo_usuario");
        if (!userId) {
          window.location.href = "/login";
          return;
        }

        const API_BASE_URL = "https://medfinder-fastapi.azurewebsites.net";
        const WS_BASE_URL = "wss://medfinder-fastapi.azurewebsites.net";
        
        const chatListEl = document.getElementById("chatList");
        const chatMainEl = document.getElementById("chatMain");
        const chatMainHeaderEl = document.getElementById("chatMainHeader");
        const chatMessagesEl = document.getElementById("chatMessages");
        const messageInputEl = document.getElementById("messageInput") as HTMLInputElement;
        const sendBtnEl = document.getElementById("sendBtn");

        let conversations: any[] = [];
        let activeConversation: any = null;
        let socket: WebSocket | null = null;

        async function loadConversations() {
          if (!chatListEl) return;
          try {
            const res = await fetch(`${API_BASE_URL}/usuarios/${userId}/conversas`);
            conversations = await res.json();
            chatListEl.innerHTML = "";
            if (conversations.length === 0) {
              chatListEl.innerHTML = "<p style='padding: 1rem;'>Nenhuma conversa encontrada.</p>";
              return;
            }
            conversations.forEach((convo: any) => {
              const otherUserName = userType === 'paciente' ? convo.MedicoNome : convo.PacienteNome;
              const item = document.createElement("div");
              item.className = "chat-item";
              (item as HTMLElement).dataset.convoId = convo.ConversaID;
              item.innerHTML = `
                <div class="chat-item-header">
                  <span class="chat-item-name">${otherUserName}</span>
                </div>
                <div class="chat-item-preview">Clique para ver as mensagens</div>
              `;
              item.addEventListener("click", () => selectConversation(convo));
              chatListEl.appendChild(item);
            });
          } catch (err) {
            chatListEl.innerHTML = "<p style='padding: 1rem;'>Erro ao carregar conversas.</p>";
            console.error(err);
          }
        }

        async function selectConversation(convo: any) {
          activeConversation = convo;
          if(chatMainEl) chatMainEl.style.display = "flex";
          
          document.querySelectorAll(".chat-item").forEach(item => {
            item.classList.toggle("active", (item as HTMLElement).dataset.convoId == convo.ConversaID);
          });

          const otherUserName = userType === 'paciente' ? convo.MedicoNome : convo.PacienteNome;
          if(chatMainHeaderEl) chatMainHeaderEl.textContent = `Conversa com ${otherUserName}`;
          
          await loadMessageHistory(convo.ConversaID);
          connectWebSocket(convo.ConversaID);
        }

        async function loadMessageHistory(convoId: number) {
          if (!chatMessagesEl) return;
          chatMessagesEl.innerHTML = "<p>Carregando histórico...</p>";
          try {
            const res = await fetch(`${API_BASE_URL}/historico/${convoId}`);
            const messages = await res.json();
            chatMessagesEl.innerHTML = "";
            messages.forEach(renderMessage);
          } catch (err) {
            console.error(err);
          }
        }

        function connectWebSocket(convoId: number) {
          if (socket) socket.close();
          socket = new WebSocket(`${WS_BASE_URL}/ws/${convoId}/${userId}`);
          
          socket.onmessage = (event) => {
            const message = JSON.parse(event.data);
            if (activeConversation && message.conversa_id === activeConversation.ConversaID) {
              renderMessage({
                RemetenteUsuarioID: message.remetente_id,
                Texto: message.texto
              });
            }
          };
          socket.onerror = (err) => console.error("WebSocket error:", err);
        }

        function renderMessage(msg: any) {
          if (!chatMessagesEl) return;
          const msgEl = document.createElement("div");
          msgEl.className = `message ${msg.RemetenteUsuarioID == userId ? 'sent' : 'received'}`;
          msgEl.innerHTML = `<div class="message-content"><p>${msg.Texto}</p></div>`;
          chatMessagesEl.appendChild(msgEl);
          chatMessagesEl.scrollTop = chatMessagesEl.scrollHeight;
        }

        function sendMessage() {
          if (!socket || socket.readyState !== WebSocket.OPEN || !activeConversation || !messageInputEl) return;
          const text = messageInputEl.value.trim();
          if (!text) return;

          const otherUserId = userType === 'paciente' 
            ? activeConversation.MedicoUsuarioID 
            : activeConversation.PacienteUsuarioID;

          const payload = {
            texto: text,
            destinatario_id: otherUserId
          };
          socket.send(JSON.stringify(payload));
          
          renderMessage({ RemetenteUsuarioID: parseInt(userId!), Texto: text });
          messageInputEl.value = "";
        }

        sendBtnEl?.addEventListener("click", sendMessage);
        messageInputEl?.addEventListener("keypress", (e: KeyboardEvent) => {
          if (e.key === "Enter") sendMessage();
        });

        loadConversations();
        lucide.createIcons();
      });
    </script>
  </body>
</html>
