---
import Sidebar from "../../components/Sidebar.astro";

// All data will be fetched and rendered on the client side.
---

<!DOCTYPE html>
<html lang="pt-BR">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>MedFinder - Meu Perfil</title>
    <style>
      :root {
        --primary: #0B9A7A;
        --primary-dark: #097F66;
        --secondary: #F5F9F8;
        --text-dark: #16403C;
        --text-light: #6A8784;
        --accent: #E6F5F2;
      }
      body {
        font-family: 'Inter', sans-serif;
        background-color: var(--secondary);
        color: var(--text-dark);
      }
      .container {
        display: flex;
        min-height: 100vh;
        max-width: 1400px;
        margin: 0 auto;
        background: white;
      }
      .main-content {
        flex: 1;
        display: flex;
        flex-direction: column;
        margin-left: 280px; /* To accommodate fixed sidebar */
      }
      .header {
        background: white;
        padding: 1.5rem 2rem;
        border-bottom: 1px solid var(--accent);
        display: flex;
        justify-content: space-between;
        align-items: center;
      }
      .page-title {
        font-size: 2rem;
        font-weight: 700;
      }
      .user-profile-header {
        display: flex;
        align-items: center;
        gap: 1rem;
      }
      .user-avatar {
        width: 40px;
        height: 40px;
        background: var(--primary);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: 600;
      }
      .content-area {
        flex: 1;
        padding: 2rem;
        overflow-y: auto;
      }
      .profile-container {
        max-width: 1000px;
        margin: 0 auto;
      }
      .profile-header {
        background: white;
        border-radius: 20px;
        padding: 2rem;
        margin-bottom: 2rem;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
        display: flex;
        align-items: center;
        gap: 2rem;
      }
      .profile-avatar {
        width: 120px;
        height: 120px;
        background: var(--primary);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 3rem;
        font-weight: 700;
        flex-shrink: 0;
      }
      .profile-info h2 {
        font-size: 2rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
      }
      .profile-info .email {
        color: var(--text-light);
        font-size: 1.1rem;
      }
      .profile-section {
        background: white;
        border-radius: 15px;
        padding: 2rem;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
        margin-bottom: 2rem;
      }
      .section-header {
        display: flex;
        justify-content: space-between;
        margin-bottom: 1.5rem;
        border-bottom: 1px solid var(--accent);
        padding-bottom: 1rem;
      }
      .section-title {
        font-size: 1.3rem;
        font-weight: 600;
      }
      .edit-btn {
        background: var(--accent);
        color: var(--primary);
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 8px;
        cursor: pointer;
        font-weight: 500;
      }
      .form-group {
        margin-bottom: 1.5rem;
      }
      .form-group label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
      }
      .form-input {
        width: 100%;
        padding: 0.75rem 1rem;
        border: 1px solid #e2e8f0;
        border-radius: 8px;
        font-size: 1rem;
      }
      .form-input:disabled {
        background: var(--secondary);
        cursor: not-allowed;
      }
      .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1rem;
      }
      .save-btn {
        background: var(--primary);
        color: white;
        border: none;
        padding: 1rem;
        border-radius: 10px;
        cursor: pointer;
        font-weight: 600;
        width: 100%;
        margin-top: 1rem;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <Sidebar currentPage="profile" userInitials="--" />
      <div class="main-content">
        <header class="header">
          <h1 class="page-title">Meu Perfil</h1>
          <div class="user-profile-header">
            <div class="user-avatar" id="headerAvatar">--</div>
          </div>
        </header>
        <div class="content-area">
          <div class="profile-container">
            <div class="profile-header">
              <div class="profile-avatar" id="profileAvatar">--</div>
              <div class="profile-info">
                <h2 id="profileName">Carregando...</h2>
                <div class="email" id="profileEmail"></div>
              </div>
            </div>
            <div class="profile-sections">
              <div class="profile-section">
                <div class="section-header">
                  <div class="section-title">Informações Pessoais</div>
                  <button class="edit-btn" id="edit-personal">Editar</button>
                </div>
                <form id="personal-form">
                  <div class="form-row">
                    <div class="form-group">
                      <label for="firstName">Nome</label>
                      <input type="text" id="firstName" class="form-input" disabled />
                    </div>
                    <div class="form-group">
                      <label for="lastName">Sobrenome</label>
                      <input type="text" id="lastName" class="form-input" disabled />
                    </div>
                  </div>
                  <div class="form-group">
                    <label for="email">Email</label>
                    <input type="email" id="email" class="form-input" disabled />
                  </div>
                  <div class="form-row">
                    <div class="form-group">
                      <label for="birthDate">Data de Nascimento</label>
                      <input type="date" id="birthDate" class="form-input" disabled />
                    </div>
                    <div class="form-group">
                      <label for="cpf">CPF</label>
                      <input type="text" id="cpf" class="form-input" disabled />
                    </div>
                  </div>
                  <button type="submit" class="save-btn" id="personal-save" style="display: none;">Salvar Alterações</button>
                </form>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <script>
      import { createIcons, icons } from "lucide";

      document.addEventListener("DOMContentLoaded", async () => {
        const userId = localStorage.getItem("usuario_id");
        if (!userId) {
          window.location.href = "/login";
          return;
        }

        const API_BASE_URL = "https://medfinder-fastapi.azurewebsites.net";

        // --- DOM Elements ---
        const headerAvatar = document.getElementById('headerAvatar');
        const profileAvatar = document.getElementById('profileAvatar');
        const profileName = document.getElementById('profileName');
        const profileEmail = document.getElementById('profileEmail');
        const firstNameInput = document.getElementById('firstName') as HTMLInputElement;
        const lastNameInput = document.getElementById('lastName') as HTMLInputElement;
        const emailInput = document.getElementById('email') as HTMLInputElement;
        const birthDateInput = document.getElementById('birthDate') as HTMLInputElement;
        const cpfInput = document.getElementById('cpf') as HTMLInputElement;

        async function loadUserProfile() {
            try {
                const [pacienteRes, usuariosRes] = await Promise.all([
                    fetch(`${API_BASE_URL}/pacientes/${userId}`),
                    fetch(`${API_BASE_URL}/usuarios`)
                ]);

                if (!pacienteRes.ok) {
                    throw new Error('Falha ao buscar dados do paciente.');
                }

                const paciente = await pacienteRes.json();
                const usuarios = await usuariosRes.json();
                
                const usuario = usuarios.find((u: any) => u.ID == userId);

                if (!paciente || !usuario) {
                    alert("Não foi possível carregar os dados do perfil.");
                    return;
                }

                const [firstName, ...lastNameParts] = paciente.nome.split(" ");
                const lastName = lastNameParts.join(" ");
                const initials = ((firstName?.[0] || '') + (lastName?.[0] || '')).toUpperCase();

                // Populate UI
                if(headerAvatar) headerAvatar.textContent = initials;
                if(profileAvatar) profileAvatar.textContent = initials;
                if(profileName) profileName.textContent = paciente.nome;
                if(profileEmail) profileEmail.textContent = usuario.Email;
                if(firstNameInput) firstNameInput.value = firstName;
                if(lastNameInput) lastNameInput.value = lastName;
                if(emailInput) emailInput.value = usuario.Email;
                if(birthDateInput) birthDateInput.value = new Date(paciente.data_nascimento).toISOString().split('T')[0];
                if(cpfInput) cpfInput.value = paciente.cpf;

            } catch (error) {
                console.error("Erro ao carregar perfil:", error);
                alert("Ocorreu um erro ao carregar seu perfil.");
            }
        }

        const toggleEdit = (section: string) => {
          const form = document.getElementById(`${section}-form`);
          if (!form) return;
          const inputs = form.querySelectorAll('.form-input');
          const saveBtn = document.getElementById(`${section}-save`);
          const editBtn = document.getElementById(`edit-${section}`);
          
          const isEditing = !(inputs[0] as HTMLInputElement).disabled;
          
          inputs.forEach(input => {
            (input as HTMLInputElement).disabled = isEditing;
          });

          if (saveBtn) saveBtn.style.display = isEditing ? 'none' : 'block';
          if (editBtn) editBtn.textContent = isEditing ? 'Editar' : 'Cancelar';
        };

        document.getElementById('edit-personal')?.addEventListener('click', () => toggleEdit('personal'));
        
        document.getElementById('personal-form')?.addEventListener('submit', (e) => {
            e.preventDefault();
            alert('Funcionalidade de salvar não implementada pois o backend não possui o endpoint de atualização.');
            toggleEdit('personal');
        });

        await loadUserProfile();
        createIcons({ icons });
      });
    </script>
  </body>
</html>
