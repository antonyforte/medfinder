---
import DashboardLayout from '../../layouts/MedicDashboardLayout.astro';

const dateParam = Astro.url.searchParams.get('date');
let currentDate;
if (dateParam) {
  const [year, month, day] = dateParam.split('-').map(Number);
  currentDate = new Date(year, month - 1, day);
} else {
  currentDate = new Date();
}
if (isNaN(currentDate.getTime())) {
  currentDate = new Date();
}

const formatDate = (date: Date) => new Intl.DateTimeFormat('pt-BR', {
  weekday: 'long', day: 'numeric', month: 'long', year: 'numeric'
}).format(date);

const formattedDate = formatDate(currentDate);

const previousDay = new Date(currentDate);
previousDay.setDate(previousDay.getDate() - 1);
const previousDayString = previousDay.toISOString().split('T')[0];

const nextDay = new Date(currentDate);
nextDay.setDate(nextDay.getDate() + 1);
const nextDayString = nextDay.toISOString().split('T')[0];

const isToday = (date: Date) => {
  const today = new Date();
  return date.getDate() === today.getDate() &&
    date.getMonth() === today.getMonth() &&
    date.getFullYear() === today.getFullYear();
};
---

<DashboardLayout>
  <div class="page-header">
    <h2>Agenda</h2>
  </div>

  <div class="calendar-nav">
    <a href={`/medicDashboard/schedule?date=${previousDayString}`} class="nav-btn"><</a>
    <h3>{formattedDate} {isToday(currentDate) && <span class="today-badge">(Hoje)</span>}</h3>
    <a href={`/medicDashboard/schedule?date=${nextDayString}`} class="nav-btn">></a>
  </div>

  <div class="schedule-container">
    <div class="time-column">
      {Array.from({ length: 10 }, (_, i) => i + 8).map(hour => (
        <div class="time-slot">{`${hour.toString().padStart(2, '0')}:00`}</div>
      ))}
    </div>
    
    <div class="appointments-column" id="appointments-column">
      <div class="no-appointments">
        <p>Carregando agendamentos...</p>
      </div>
    </div>
  </div>

  <style>
    .page-header{display:flex;justify-content:space-between;align-items:center;margin-bottom:20px}h2{font-size:1.8rem;font-weight:500;color:#333;margin:0}.header-actions{display:flex;gap:10px}.btn-primary{background-color:#0B9A7A;color:white;border:none;border-radius:4px;padding:8px 15px;cursor:pointer}.calendar-nav{display:flex;align-items:center;justify-content:space-between;margin-bottom:20px;background-color:#f9f9f9;padding:15px;border-radius:8px}.calendar-nav h3{margin:0;font-size:1.2rem;text-transform:capitalize}.today-badge{font-size:.8rem;background-color:#0B9A7A;color:white;padding:2px 8px;border-radius:10px;margin-left:8px}.nav-btn{background:0 0;border:1px solid #ddd;border-radius:50%;width:30px;height:30px;display:flex;align-items:center;justify-content:center;cursor:pointer;text-decoration:none;color:#555}.schedule-container{display:flex;min-height:600px;border:1px solid #eee;border-radius:8px;position:relative}.time-column{width:80px;border-right:1px solid #eee}.time-slot{height:60px;display:flex;align-items:center;justify-content:center;color:#777;font-size:.9rem;border-bottom:1px solid #eee}.appointments-column{flex:1;position:relative;padding:0}.appointment{position:absolute;left:10px;right:10px;background-color:#e8f5ff;border-left:4px solid #4a90e2;border-radius:4px;padding:10px;display:flex;align-items:center;transition:transform .2s,box-shadow .2s;z-index:2;overflow:hidden}.appointment:hover{transform:translateY(-2px);box-shadow:0 4px 8px rgba(0,0,0,.1);z-index:3}.appointment.confirmada{background-color:#e8f5ff;border-left-color:#4a90e2}.appointment.pendente{background-color:#fff8e8;border-left-color:#f9a825}.appointment.cancelada{background-color:#ffe7e7;border-left-color:#cc1717;opacity:.8}.appointment-time{font-weight:700;margin-right:15px;min-width:50px}.appointment-details{flex:1}.appointment-details h4{margin:0 0 5px;font-size:1rem}.appointment-details p{margin:0;font-size:.9rem;color:#555}.no-appointments{display:flex;justify-content:center;align-items:center;height:100%;color:#888;font-style:italic}
  </style>

  <script>
    document.addEventListener('DOMContentLoaded', async () => {
      const medicId = localStorage.getItem("usuario_id");
      if (!medicId) {
        window.location.href = "/login";
        return;
      }

      const appointmentsColumn = document.getElementById('appointments-column');
      const urlParams = new URLSearchParams(window.location.search);
      const dateParam = urlParams.get('date') || new Date().toISOString().split('T')[0];

      const getMarginTopForTime = (timeString: string) => {
        const [hours, minutes] = timeString.split(':').map(Number);
        return ((hours - 8) * 60 + minutes);
      };

      const getAppointmentHeight = (start: string, end: string) => {
        const startDate = new Date(start);
        const endDate = new Date(end);
        const durationMinutes = (endDate.getTime() - startDate.getTime()) / 60000;
        return durationMinutes;
      };

      try {
        const [agendasRes, pacientesRes] = await Promise.all([
          fetch('https://medfinder-fastapi.azurewebsites.net/agendas/'),
          fetch('https://medfinder-fastapi.azurewebsites.net/pacientes')
        ]);
        const allAgendas = await agendasRes.json();
        const allPacientes = await pacientesRes.json();

        const medicAgendas = allAgendas.filter((a: any) => a.medico_id == parseInt(medicId));
        
        const date = new Date(dateParam + 'T00:00:00');
        const appointmentsForDay = medicAgendas.filter((a: any) => {
          const agendaDate = new Date(a.data_inicio);
          return agendaDate.getUTCFullYear() === date.getUTCFullYear() &&
                 agendaDate.getUTCMonth() === date.getUTCMonth() &&
                 agendaDate.getUTCDate() === date.getUTCDate();
        });

        if (appointmentsColumn) {
          appointmentsColumn.innerHTML = '';
          if (appointmentsForDay.length > 0) {
            appointmentsForDay.forEach((appointment: any) => {
              const paciente = allPacientes.find((p: any) => p.id === appointment.paciente_id);
              const startTime = new Date(appointment.data_inicio).toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });
              
              const appointmentEl = document.createElement('div');
              appointmentEl.className = `appointment ${appointment.status.toLowerCase()}`;
              appointmentEl.style.top = `${getMarginTopForTime(startTime)}px`;
              appointmentEl.style.height = `${getAppointmentHeight(appointment.data_inicio, appointment.data_fim)}px`;
              
              appointmentEl.innerHTML = `
                <div class="appointment-time">${startTime}</div>
                <div class="appointment-details">
                  <h4>${paciente ? paciente.nome : 'Desconhecido'}</h4>
                  <p>Consulta</p>
                </div>
              `;
              appointmentsColumn.appendChild(appointmentEl);
            });
          } else {
            appointmentsColumn.innerHTML = `
              <div class="no-appointments">
                <p>Não há agendamentos para esta data.</p>
              </div>
            `;
          }
        }
      } catch (error) {
        console.error('Erro ao carregar agendamentos:', error);
        if (appointmentsColumn) {
          appointmentsColumn.innerHTML = `
            <div class="no-appointments">
              <p>Erro ao carregar agendamentos.</p>
            </div>
          `;
        }
      }
    });
  </script>
</DashboardLayout>
