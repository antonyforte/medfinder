---
import DashboardLayout from '../../layouts/MedicDashboardLayout.astro';
---

<DashboardLayout>
  <h2>Olá <span id="medic-name"></span></h2>

  <div class="dashboard-card">
    <h3>Próximas Consultas</h3>
    <div id="upcoming-appointments"></div>
  </div>

  <div class="dashboard-card">
    <h3>Consultas Pendentes</h3>
    <div id="pending-appointments"></div>
  </div>

  <style>
    h2 {
      font-size: 1.8rem;
      font-weight: 500;
      margin-bottom: 30px;
      color: #333;
    }
    
    .dashboard-card {
      background-color: #f2f2f2;
      border-radius: 8px;
      padding: 20px;
      margin-bottom: 20px;
    }
    
    h3 {
      font-size: 1.2rem;
      font-weight: 500;
      margin-bottom: 20px;
      color: #333;
    }
    .appointment-card {
      background-color: white;
      border-radius: 8px;
      padding: 15px;
      margin-bottom: 10px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .appointment-card p {
      margin: 0 0 5px 0;
    }
    .appointment-card button {
      background-color: var(--primary);
      color: white;
      border: none;
      padding: 8px 12px;
      border-radius: 5px;
      cursor: pointer;
      margin-right: 10px;
    }
    .appointment-card .cancel-button {
      background-color: #dc3545;
    }
  </style>
</DashboardLayout>

<script>
  import { createIcons, icons } from "lucide";

  declare global {
    interface Window {
      updateAppointmentStatus: (agendaId: number, status: string) => Promise<void>;
    }
  }

  interface Appointment {
    id: number;
    data_inicio: string;
    status: string;
    medico_id: number;
    paciente_id: number;
  }

  interface Paciente {
    id: number;
    nome: string;
  }

  document.addEventListener("DOMContentLoaded", async () => {
    const userId = localStorage.getItem("usuario_id");
    if (!userId) {
      window.location.href = "/login";
      return;
    }

    try {
      const profileResponse = await fetch(`https://medfinder-fastapi.azurewebsites.net/medicos/${userId}`);
      if (profileResponse.ok) {
        const medic = await profileResponse.json();
        const medicNameElement = document.getElementById('medic-name');
        if (medicNameElement) {
          medicNameElement.textContent = medic.nome;
        }
      } else {
        console.error('Failed to fetch medic profile');
      }

      const appointmentsResponse = await fetch('https://medfinder-fastapi.azurewebsites.net/agendas/');
      const pacientesResponse = await fetch('https://medfinder-fastapi.azurewebsites.net/pacientes');

      if (appointmentsResponse.ok && pacientesResponse.ok) {
        const appointments: Appointment[] = await appointmentsResponse.json();
        const pacientes: Paciente[] = await pacientesResponse.json();
        
        const now = new Date();
        const upcomingAppointments = appointments
          .filter((a: Appointment) => a.medico_id == parseInt(userId) && a.status === 'confirmada' && new Date(a.data_inicio) > now)
          .sort((a, b) => new Date(a.data_inicio).getTime() - new Date(b.data_inicio).getTime())
          .slice(0, 3);

        const pendingAppointments = appointments
          .filter((a: Appointment) => a.medico_id == parseInt(userId) && a.status === 'pendente');

        const upcomingContainer = document.getElementById('upcoming-appointments');
        const pendingContainer = document.getElementById('pending-appointments');

        if (upcomingContainer) {
          upcomingContainer.innerHTML = upcomingAppointments.map((a: Appointment) => {
            const paciente = pacientes.find(p => p.id === a.paciente_id);
            return `
              <div class="appointment-card">
                <p><strong>Paciente:</strong> ${paciente ? paciente.nome : 'Desconhecido'}</p>
                <p><strong>Data:</strong> ${new Date(a.data_inicio).toLocaleString()}</p>
              </div>
            `;
          }).join('');
        }
        if (pendingContainer) {
          pendingContainer.innerHTML = pendingAppointments.map((a: Appointment) => {
            const paciente = pacientes.find(p => p.id === a.paciente_id);
            return `
              <div class="appointment-card">
                <p><strong>Paciente:</strong> ${paciente ? paciente.nome : 'Desconhecido'}</p>
                <p><strong>Data:</strong> ${new Date(a.data_inicio).toLocaleString()}</p>
                <button onclick="updateAppointmentStatus(${a.id}, 'confirmada')">Confirmar</button>
                <button onclick="updateAppointmentStatus(${a.id}, 'cancelada')" class="cancel-button">Cancelar</button>
              </div>
            `;
          }).join('');
        }
      } else {
        console.error('Failed to fetch appointments or pacientes');
      }
    } catch (error) {
      console.error('Error fetching data:', error);
    }
    createIcons({ icons });
  });

  window.updateAppointmentStatus = async function(agendaId: number, status: string) {
    try {
      const response = await fetch(`https://medfinder-fastapi.azurewebsites.net/agendas/${agendaId}/status`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ status }),
      });

      if (response.ok) {
        location.reload();
      } else {
        const errorData = await response.json();
        console.error('Failed to update appointment status:', errorData.detail);
        alert(`Erro ao atualizar agendamento: ${errorData.detail}`);
      }
    } catch (error) {
      console.error('Error updating appointment status:', error);
      alert('Ocorreu um erro de rede. Tente novamente.');
    }
  }
</script>
